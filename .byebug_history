c
@invitation
c
!@token.nil?
@user = current_user
c
@list
c
params
c
self.first_name
c
user_params[:last_name]
user_params[:first_name]
c
self.previous_changes[:first_name].last
self.previous_changes[:first_name].first
self.previous_changes.key?(:first_name)
c
self.first_name
self.previous_changes[:first_name].last
self.previous_changes[:first_name].first
c
user_params
c
self
c
self
(self.previous_changes.key?(:first_name)
c
   298:           self.previous_changes[:last_name].first != self.previous_changes[:last_name].last)
   297:           self.previous_changes[:first_name].first != self.previous_changes[:first_name].last) || (self.previous_changes.key?(:last_name) &&
(self.previous_changes.key?(:first_name) &&
self.previous_changes.key?(:last_name)
self.previous_changes.key?(:first_name)
self
self.previous_changes[:last_name].first
c
@user.errors.full_messages
@user.errors.messages.full_messages
@user.errors.messages
 numberoferror
c
@user = User.find_by(email: params[:password_reset][:email].downcase)
params
c
params
@user = User.find_by(email: params[:password_reset][:email].downcase)
c
User.find_by_email('lolosxsxsxs@yahoo.com').destroy
User.find_by_email('lolosxsxsxs@yahoo.com')
User.find_by_email(lolosxsxsxs@yahoo.com)
User.all
Hirb.enable
User.all
User.find_by_email(params[:session][:email].downcase)
params[:session][:email].downcase
User.find_by_email(params[:session][:email].downcase)
c
@user.errors.blank?
@user.update_attributes(user_params)
@user
c
@user.errors.blank?
@user.errors
@user
c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
@new_email.blank?
@current_password = user_params[:current_password]
@new_email = user_params[:new_email].to_s.downcase
params
c
params
 @new_email = user_params[:new_email].to_s.downcase
c
params[:new_email].to_s.downcase
c
@user && @user.authenticate(user_params[:current_password]) && @user.activated
params
c
user_params[:current_password]
(params[:user][:current_password]
(params[:current_password]
@user.authenticate(params[:current_password])
 @user && @user.authenticate(params[:current_password]) && @user.activated
params
c
params[:session][:password]
c
params[:password]
@user.authenticate(params[:password])
@user
@user.activated
 @user.authenticate(params[:password])
@user && @user.authenticate(params[:password]) && @user.activated
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
params
c
@user
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
params
c
params
c
@task.update_attribute(:completed_at, Time.now)
@task
c
params
c
params
c
@user
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
 invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
 !invitation.nil?
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
@invitations.destroy
 @invitations = Invitation.find_by(recipient_email: @user.email,list_id: @list.id)
@collaboration
c
 Invitation.all
Hirb.enable
 Invitation.all
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
params
user.owner?(task.list) || user == task.user
c
params
c
user.owner?(task.list) || user == task.user
c
user == task.user
user.owner?(task.list)
task
c
params
c
@tasks
tasks
task
c
authorize @tasks
authorize tasks
@tasks = Task.find(params[:task])
params
c
user.owner?(list)
params
c
params
c
params
c
params
c
params
c
task
user.owner?(list)
c
params
c
params
c
 user.owner?(list)
 user.owner?(@list)
list
record.try(:user)
record.try(:list)
@list
list
params
c
 @list = List.find(params[:list_id])
c
user
record.try(:user)
@list
record.try(:list)
c
@list = List.find(params[:list_id])
params
c
params[:task].each_with_index do |id, index|
params
c
params
c
(@invitation.recipient != nil) && (!@invitation.active)
@invitation.recipient
 @invitation
c
(!invitation.nil? && self.new_record?)
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
self.invitations.find_by_list_id(list_id).active
self.invitations.find_by_list_id(list_id)
c
self.invitations.find_by_list_id(list_id).active
self.invitations.find_by_list_id(list_id)
self
list_id
c
Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
invitation.nil?
invitation.nil
self.new_record?
(!invitation.nil? && self.new_record?)
c
self.active && User.find_by_email(recipient_email).collaboration_lists.include?(List.find(list_id))
User.find_by_email(recipient_email).collaboration_lists.include?(List.find(list_id))
self.recipient
 self.recipient.collaboration_lists.include?(List.find(list_id))
self.active
(self.active && self.recipient.collaboration_lists.include?(List.find(list_id)))
!self.active
c
(!self.nil? && self.new_record?)
c
!invitation.active
c
self.new_record?
self.nil?
self.nil
(!self.nil? && self.new_record?)
c
 @collaboration.destroy
@collaboration = Collaboration.find_by(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
@collaboration.destroy
 @collaboration = Collaboration.where(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
(!params[:type].blank?) && (params[:type]== 'collaborator')
((params[:user_id].blank?) && (params[:type].blank?))
params
c
params
c
params
c
params
c
