c
model.image.store_dir
model.image.current_path
public_url(model.image.store_dir)
model.image.store_dir
model.image.path
model.image_path
model.image_url('tumb')
model.image_url
model.image.url
model.image
model
c
self.previous_changes
c
self.image.url
 self.previous_changes[:image].first != self.previous_changes[:image].last
self.previous_changes.key?(:image)
c
params
self.image.previous_changes
self.previous_changes
self.previous_changes.key?(:image)
c
self.previous_changes.key?(:image) 
c
self.previous_changes
self.previous_changes.key
self.previous_changes.key?
c
objects[0]
mounted_object = objects[0].send(MOUNTED_UPLOADER)
mounted_object = object.send(MOUNTED_UPLOADER)
ASSOCIATION.singularize?
objects = [record.send(ASSOCIATION)]
ASSOCIATION.singularize
ASSOCIATION.singular?
ASSOCIATION
c
ASSOCIATION
c
u.save
u.image.url
u.image= image
u.image
u =user 
user.save
user.image = image
image = open(File.join(path, user.avatar_file_name), 'wb')
user.crop_h=76
user.crop_w=76
user.crop_x=0
user.crop_x=0\
 user.crop_y=0
 File.exist?(path)
FileUtils.mkdir_p(path) unless File.exist?(path)
image = AvatarUploader.new
path
c
user.image = File.open(File.join( path, user.avatar_file_name), 'wb')
user.image = File.open('/Users/picglobal/Desktop/demo-sessionsapp/uploads/user/image/1/1.png/1.png', 'wb')
Rails.root.to_s
user.image = File.open(File.join(Rails.root.to_s, path), 'wb')
user.image = File.open(path, 'wb')
user.image = File.open(File.join(path, user.avatar_file_name), 'wb')
FileUtils.mkdir_p(path) unless File.exist?(path)
path = File.join 'uploads', 'user', 'image', user.id.to_s, user.avatar_file_name
path
User.find_by_email('mrodriguez@prototypeit.us').image.url
User.find_by_email('mrodriguez@prototypeit.us')
User.find_by_email('mrodriguez@prototypeit.us'))
user.avatar.url
user.avatar
user.avatart
user.image.url
user.image
user.id
user.id\
path
c
model.crop_h
model.crop_w
model.crop_y
model.crop_x
c
model.crop_x
c
model.crop_x
params
c
@behavior = params[:behavior]
params
0000000000000000000000000000000
c
image.url
image.recreate_versions! if crop_x.present?
crop_x.present?
c
crop_x
c
self.crop_x
self
crop_x
c
@user
@user.update_attributes(user_params)
params
c
user_params
params
self
crop_x
c
crop_x
c
crop_x
self
@user
c
params
crop_x
crop_x.present?
c
crop_x.present?
c
@user.update(image: user_params[:image])
==================================================================================
c
user_params[:image].present?
c
@user.update_attributes(user_params)
c
user_params
@user.errors
@user.update_attributes(user_params)
c
@user.errors
@users.errors
@users.params
@user.update_attributes(user_params)
c
@user.update_attributes(user_params)
c
@user.errors
@user.error
 @user.update_attributes(user_params)
c
user_params
@user
@user.update_attributes(user_params)
c
index
!@active_collaborations.include?(index)
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }.nil?
@users.ids.index{ |x| !@active_collaborations.include?(x) }
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
@active_collaborations
@users.ids.index{ |x| !@active_collaborations.include?(x) }.nil?
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
session[:active_collaborations]
c
params
----------------------------------------------------------------------------------------------------------------------------
c
user_params[:image].present?
c
user_params[:image]
 @user.update(image: user_params[:image])
c
@user.update_attributes(params[:user])
params[:user]
@user
params
@user.update_attributes(params[:user])
c
user_params[:image]
@user.update_attributes(:image =>user_params[:image])
@user.current_step = (user_params[:current_step].present?)? user_params[:current_step] : ""
==================================---------------------------
c
@user.update_attributes(:avatar =>user_params[:avatar])
c
 @user.update_attributes(:avatar =>user_params[:avatar])
c
@user.update_attributes(:avatar =>user_params[:avatar])
user_params[:current_step].present?
@user.current_step = (user_params[:current_step].present?)? user_params[:current_step] : ""
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
@users.ids.index{ |x| !@active_collaborations.ids.include?(x) }
@active_collaborations.index{ |x| !@users.ids.include?(x) }
@active_collaborations- @users.ids
@users.ids
@active_collaborations
@active_collaborations.index{ |x| !@users.ids.include?(x) }
@users
@users@users
 @active_collaborations
@active_collaborations.index{ |x| !@users.include?(x) }
@active_collaborations.index{ |x| !@users.include?(x) }.nil?
@active_collaborations.index{ |x| !@users.include?(x) }.nil?\
 @active_collaborations.any?(@users.ids)
 @active_collaborations.include?(@users.ids)
@active_collaborations.include?(@users.ids)
 @users.ids
@active_collaborations
c
@active_collaborations
 @users.ids
 @users
c
current_list.collaboration_users.where.not(id: @user.id )
current_list.collaboration_users
current_list
@user.id
@users
 @users = current_list.collaboration_users.where.not(user_id: @user.id)
@users
000000000000000000000000000000000000000000000000000000000000000000000000000000000000
27277272727277272727272772727272772727272727727272
c
params
session[:active_collaborations]
c
params
active_collaborations
session[:active_collaborations]
c
params
active_collaborations
session[:active_collaborations] 
c
id
pos = active_collaborations.index(id)
session[:active_collaborations]
params
c
active_collaborations[pos] = value
active_collaborations[index] = id
pos = active_collaborations.index(id)
params
c
id
active_collaborations.index(10)
active_collaborations
pos = active_collaborations.index(id)
 active_collaborations[index]
i
id
active_collaborations
session[:active_collaborations] 
c
id
