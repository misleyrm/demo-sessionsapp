c
InvitationMailer.send_invitation(@invitation, @url).deliver_now
  @url = sign_up_url(:invitation_token => @invitation.token)
@invitation
 @invitation.recipient 
c
User.find_by_email(recipient_email)
c
recipient
User.find_by_email(recipient_email)
c
@invitation
c
@invitation.sender_id
@invitation
c
self.user_id
status = 'changelist'
 status
status: status
num_list_change = self.user.num_incompleted_tasks(List.find(list))
num = self.user.num_incompleted_tasks(List.find(self.list_before))
self.previous_changes[:list_id].last
    self.previous_changes[:list_id].first
    list = self.list_id
    user = self.user_id
    partial = 'task'
   else
     list = self.parent_task.list_id
     user = self.parent_task.user_id
     partial = 't_blocker'
if (is_blocker?)
c
user
self
render_task(self,partial)
c
self
c
html
c
self
c
self
c
self
c
self
selft
c
=> 67:       self.previous_changes[:list_id].first != self.previous_changes[:list_id].last)
 (self.previous_changes.key?(:list_id) &&
self
self.previous_changes.key?(:list_id)
c
session[:list_id]
params
c
session[:list_id]
c
session[:list_id]
c
session[:list_id]
params
c
session[:list_id]
params
c
session[:list_id]
c
session[:list_id]
c
params
c
session[:list_id]
params
c
params
session[:list_id]
c
session[:list_id]
c
@user.errors.count
@user.errors.any?
@user.errors.any
c
@user.errors
@user.error
@user
c
invitation.recipient_email
exit
is_blocker?
self
params
c
@user.save
 @token = params[:invitation_token]
@user = User.create(user_params)
user_params
exit
params
c
session[:list_id]
c
params
c
session[:list_id]
params
c
session[:list_id]
params
c
params
session[:list_id]
parms
c
session[:list_id]
params
c
session[:list_id]
params
c
session[:list_id]
c
params
c
session[:list_id]
c
session[:list_id]
List.current
c
params
c
List.current
List_current
session[:list_id]
current_list
params
c
params
parms
session[:list_id]
c
List.current
current_list
cuerrent_list
@list
c
params
c
params
c
task_params
tastask_params
c
current_user
@task = current_list.tasks.build(task_params,user_id: current_user.id )
current_list
params
c
params
self
c
current_list
params
c
session[:list_id]
List.current
current_list
 params[:id].blank?
c
@list = List.find(params[:id])
params[:id].blank?
c
 @list = List.find(params[:id])
params[:id]
params[:id].blank?
c
current_list
params[:id]
params[:id].blank?
c
List.current
@_current_list = List.current = @list
session[:list_id] = params[:list_id]
List.current
 @_current_list = session[:list_id] = nil
List.current
@list != List.current
@list = List.find(params[:list_id])
exit
@list = List.find(params[:list_id])
c
List.current
@_current_list
    else
      num = ''
      partial = 't_blocker'
@_  if (is_blocker?)
current_list
c
current_list
c
 @list = List.find(params[:list_id])
c
 @list = List.find(params[:list_id])
c
params[:list_id]
c
@_current_list
@_current_list = @list
@_current_list
current_list
List.current
@list = List.current = session[:list_id] = List.find(params[:list_id])
List.current
params
c
List.current
c
List.current
c
session[:list_id]
@list
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
current_list
@current_list = List.find(list_id)
(list_id = session[:list_id])
List.current
c
(list_id = session[:list_id])
c
params
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
c
(list_id = session[:list_id])
params
c
params
(list_id = session[:list_id])
