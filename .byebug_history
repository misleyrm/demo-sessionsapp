c
image.url
image.recreate_versions! if crop_x.present?
crop_x.present?
c
crop_x
c
self.crop_x
self
crop_x
c
@user
@user.update_attributes(user_params)
params
c
user_params
params
self
crop_x
c
crop_x
c
crop_x
self
@user
c
params
crop_x
crop_x.present?
c
crop_x.present?
c
@user.update(image: user_params[:image])
==================================================================================
c
user_params[:image].present?
c
@user.update_attributes(user_params)
c
user_params
@user.errors
@user.update_attributes(user_params)
c
@user.errors
@users.errors
@users.params
@user.update_attributes(user_params)
c
@user.update_attributes(user_params)
c
@user.errors
@user.error
 @user.update_attributes(user_params)
c
user_params
@user
@user.update_attributes(user_params)
c
index
!@active_collaborations.include?(index)
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }.nil?
@users.ids.index{ |x| !@active_collaborations.include?(x) }
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
@active_collaborations
@users.ids.index{ |x| !@active_collaborations.include?(x) }.nil?
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
session[:active_collaborations]
c
params
----------------------------------------------------------------------------------------------------------------------------
c
user_params[:image].present?
c
user_params[:image]
 @user.update(image: user_params[:image])
c
@user.update_attributes(params[:user])
params[:user]
@user
params
@user.update_attributes(params[:user])
c
user_params[:image]
@user.update_attributes(:image =>user_params[:image])
@user.current_step = (user_params[:current_step].present?)? user_params[:current_step] : ""
==================================---------------------------
c
@user.update_attributes(:avatar =>user_params[:avatar])
c
 @user.update_attributes(:avatar =>user_params[:avatar])
c
@user.update_attributes(:avatar =>user_params[:avatar])
user_params[:current_step].present?
@user.current_step = (user_params[:current_step].present?)? user_params[:current_step] : ""
c
@users.ids.index{ |x| !@active_collaborations.include?(x) }
@users.ids.index{ |x| !@active_collaborations.ids.include?(x) }
@active_collaborations.index{ |x| !@users.ids.include?(x) }
@active_collaborations- @users.ids
@users.ids
@active_collaborations
@active_collaborations.index{ |x| !@users.ids.include?(x) }
@users
@users@users
 @active_collaborations
@active_collaborations.index{ |x| !@users.include?(x) }
@active_collaborations.index{ |x| !@users.include?(x) }.nil?
@active_collaborations.index{ |x| !@users.include?(x) }.nil?\
 @active_collaborations.any?(@users.ids)
 @active_collaborations.include?(@users.ids)
@active_collaborations.include?(@users.ids)
 @users.ids
@active_collaborations
c
@active_collaborations
 @users.ids
 @users
c
current_list.collaboration_users.where.not(id: @user.id )
current_list.collaboration_users
current_list
@user.id
@users
 @users = current_list.collaboration_users.where.not(user_id: @user.id)
@users
000000000000000000000000000000000000000000000000000000000000000000000000000000000000
27277272727277272727272772727272772727272727727272
c
params
session[:active_collaborations]
c
params
active_collaborations
session[:active_collaborations]
c
params
active_collaborations
session[:active_collaborations] 
c
id
pos = active_collaborations.index(id)
session[:active_collaborations]
params
c
active_collaborations[pos] = value
active_collaborations[index] = id
pos = active_collaborations.index(id)
params
c
id
active_collaborations.index(10)
active_collaborations
pos = active_collaborations.index(id)
 active_collaborations[index]
i
id
active_collaborations
session[:active_collaborations] 
c
id
active_collaborations.index(id)
active_collaborations.index(id
active_collaborations
params
 session[:active_collaborations]
c
session[:active_collaborations]
id
session[:active_collaborations].include?(id)
c
 params[:collaboration_user].map(&:to_i)
 params[:collaboration_user].map{|word| integer}
params
c
session[:active_collaborations]
 params[:collaboration_user]
params[:collaboration_user].index_by(&:st).values_at(*session[:active_collaborations])
params[:collaboration_user].index_by(&:i).values_at(*session[:active_collaborations])
session[:active_collaborations].index_by(&:i).values_at(*params[:collaboration_user])
session[:active_collaborations].index_by(&:id).values_at(*params[:collaboration_user])
 params[:collaboration_user]
session[:active_collaborations].sort_by{|i| params[:collaboration_user].index id}
params[:collaboration_user].index id
params[:collaboration_user].index i.id
params[:collaboration_user].index i.i
params[:collaboration_user].index
session[:active_collaborations].sort_by{|i| params[:collaboration_user].index i.i}
session[:active_collaborations].sort_by{|i| params[:collaboration_user].index i.id}
session[:active_collaborations].sort_by{|x| params[:collaboration_user].index x.id}
session[:active_collaborations].sort_by{|id| params[:collaboration_user].index id.x}
session[:active_collaborations].sort_by{|id| params[:collaboration_user].index id}
session[:active_collaborations].sort_by{|id| params[:collaboration_user].index x}
session[:active_collaborations].sort_by {|id| params[:collaboration_user]}
session[:active_collaborations]
session[:active_users]
session[:collaboration_users]
Collaboration.where(:user_id=> id, :list_id => params[:list_id])
index
id
params[:collaboration_user]
c
params
c
params
c
params
c
params
c
session[:active_collaborations]
session[:active_collaborations].nil?
session[:active_collaborations].nil
c
 session[:active_collaborations]
users = User.where(id: session[:active_collaborations])
(!session[:active_collaborations].nil?)
session[:active_collaborations]
c
session[:active_collaborations]
(!session[:active_collaborations].nil?)
c
((list.collaboration_users.include?(users.first)) || users.first.owner(list))
c
list.collaboration_users.to_a.uniq{|p| p.id}
list_users = list.collaboration_users.to_a.uniq{|p| p.id} + list.owner
list_users = list.collaboration_users.to_a.uniq{|p| p.id} + list.owner.to_a
c
users.length
users
list_users
(list_users.include?(users))
(list_users.include?(session[:active_collaborations]))
list_users = list.collaboration_users + User.where('id' => list.owner.id)
users
Hirb.enable
users
c
session[:active_collaborations]
c
list.collaboration_users.include?(users.first)
 session[:active_collaborations]
c
session[:active_collaborations]
users = User.where(id: session[:active_collaborations])
list
c
!authorize @task
c
authorize @task
c
user.owner?(task.list_after)
task.list_after
task.try(:list)
