c
email
c
@email_blockers
c
@email_blockers
c
 @email_blockers = @task.t_blockers.map {|blocker| blocker.mention_emails} if (!@task.is_blocker?)
c
@t_blockers
c
@t_blockers
@t_blockers = @task.t_blockers if (!@task.is_blocker?)
c
@t_blockers
(!@task.is_blocker?)
c
Task.find_by('parent_task_id':118)
Task.find_by(parent_task_id:118)
hirb.enable
@task.blockers
@task.t_blockers
@task
@task.has_blockers?
 (!@task.is_blocker?)
@task.is_blocker?
c
tag_emails = @task.mention_emails
c
(!@task.is_blocker?)
@task.is_blocker?
c
@task.is_blocker?
(!@task.is_blocker?)
c
 Notification.create(recipient:@task.assigner_id, actor:current_user, action: "has marked as completed", notifiable: @task) 
!(current_user?(@task.assigner_id))
   152:      respond_to do |format|
@task
current_user
@task.assigner_id
  Notification.create(recipient:@task.assigner_id, actor:current_user, action: "has marked as completed", notifiable: @task) if !(current_user?(@task.assigner_id))
 !(current_user?(@task.assigner_id))
@task.assigner_id
c
current_user
User.find(@task.assigner_id)
@task.assigner_id
(@task.assigner_id
Notification.last
Notification.las
(@task.assigner_id != @task.user_id)
@task
c
(current_list.collaboration_users.uniq + [current_list.owner] - [current_user])
c
current_list.collaboration_users.uniq
(current_list.collaboration_users.uniq + current_list.owner - [current_user])
!(current_list.all_tasks_list?)
@task
current_list
c
(current_list.collaboration_users.uniq + current_list.owner - [current_user])
current_list
current_list.collaboration_users
current_list.collaboration_users.uniq
 current_list.owner
c
(current_list.collaboration_users.uniq - [current_user]).count
(current_list.collaboration_users.uniq - [current_user])
c
current_list.users.uniq - [current_user]
current_list.users.uniq
c
user
@current_password
 user.authenticate(@current_password)
c
user.authenticate(@current_password)
c
user.authenticate(@current_password)
c
 @current_password = params[:current_password]
 numberoferror 
c
@user.id
@user
@new_owner_id
@user
@new_owner_id == @user
 @current_password = params[:current_password]
@new_owner_id = params[:list_owner]
@new_owner_id.blank?
params[:current_password]
params[:list_owner]
params
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c
@new_owner
c
List.find(2)
@list.save
List.find(2)
@list
c
current_user
@user
 @collaboration
c
(@list.user_id!= params[:list_owner].to_i)
(!@list.all_tasks_list?) && (!params[:list_owner].blank?)
 @user && @user.authenticate(params[:current_password]) && @user.activated
c
@user && @user.authenticate(params[:current_password]) && @user.activated
params
c
self.collaboration_users.joins(:collaboration).where.not(collaborations: {collaboration_date: nil})
active_collaborators
active_collaborations
collaborator_user.first_name
collaborator_user.name
collaborator_user
c
self.collaborations.joins(:user).where.not(collaborations: {collaboration_date: nil})
c
(@list.user_id!= params[:list_owner].to_i)
@user && @user.authenticate(params[:current_password]) && @user.activated
(!@list.all_tasks_list?) && (!params[:list_owner].blank?)
c
(!@list.all_tasks_list?) && (!params[:list_owner].blank?)
current_user && current_user.authenticate(params[:current_password]) && current_user.activated
c
cparams[:list_owner]
current_user && current_user.authenticate(params[:current_password]) && current_user.activated
params
c
params
c
exit
params
c
num_completed_tasks_date = self.user.num_completed_tasks_by_date(self.list, self.previous_changes[:completed_at].first.to_date)
 self.previous_changes[:completed_at].first.to_date
 self.previous_changes[:completed_at].first
num_completed_tasks_date
c
date = (Date.today.to_date - self.previous_changes[:completed_at].first.to_date).to_i
date = (Date.today - self.previous_changes[:completed_at].first).to_i
self.previous_changes[:completed_at].first
Date.today
date = Date.today - self.previous_changes[:completed_at].first
self.completed_at
date = self.completed_at - self.previous_changes[:completed_at].first
c
Invitation.find_by(recipient_email: @user.email, list_id: @list.id)
@list.invitations.where(recipient_email: @user.email)
c
@user.created_lists.build(:name =>@list.name, :description => @list.description, :avatar => @list.avatar)
Collaboration.find_by(user_id: @user.id, list_id: @list.id)
 (!params[:type].blank? && params[:type]=="collaborator")
c
User.find_by_email(recipient_email)
recipient
c
recipient_id
sender_id == recipient_id
c
 sender_id
 recipient_id
 sender_id == recipient_id
c
(self.active && User.find_by_email(recipient_email).collaboration_lists.include?(List.find(list_id)))
!self.active
c
(!invitation.nil? && self.new_record?)
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
@invitation
c
!@token.nil?
@user = current_user
c
@list
c
params
c
self.first_name
c
user_params[:last_name]
user_params[:first_name]
c
self.previous_changes[:first_name].last
self.previous_changes[:first_name].first
self.previous_changes.key?(:first_name)
c
self.first_name
self.previous_changes[:first_name].last
self.previous_changes[:first_name].first
c
user_params
c
self
c
self
(self.previous_changes.key?(:first_name)
c
   298:           self.previous_changes[:last_name].first != self.previous_changes[:last_name].last)
   297:           self.previous_changes[:first_name].first != self.previous_changes[:first_name].last) || (self.previous_changes.key?(:last_name) &&
(self.previous_changes.key?(:first_name) &&
self.previous_changes.key?(:last_name)
self.previous_changes.key?(:first_name)
self
self.previous_changes[:last_name].first
c
@user.errors.full_messages
@user.errors.messages.full_messages
@user.errors.messages
 numberoferror
c
@user = User.find_by(email: params[:password_reset][:email].downcase)
params
c
params
@user = User.find_by(email: params[:password_reset][:email].downcase)
c
User.find_by_email('lolosxsxsxs@yahoo.com').destroy
User.find_by_email('lolosxsxsxs@yahoo.com')
User.find_by_email(lolosxsxsxs@yahoo.com)
User.all
Hirb.enable
User.all
User.find_by_email(params[:session][:email].downcase)
params[:session][:email].downcase
User.find_by_email(params[:session][:email].downcase)
c
@user.errors.blank?
@user.update_attributes(user_params)
@user
c
@user.errors.blank?
@user.errors
@user
c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
@new_email.blank?
@current_password = user_params[:current_password]
@new_email = user_params[:new_email].to_s.downcase
params
c
params
 @new_email = user_params[:new_email].to_s.downcase
c
params[:new_email].to_s.downcase
