c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
 @user && @user.authenticate(user_params[:current_password]) && @user.activated
c
@new_email.blank?
@current_password = user_params[:current_password]
@new_email = user_params[:new_email].to_s.downcase
params
c
params
 @new_email = user_params[:new_email].to_s.downcase
c
params[:new_email].to_s.downcase
c
@user && @user.authenticate(user_params[:current_password]) && @user.activated
params
c
user_params[:current_password]
(params[:user][:current_password]
(params[:current_password]
@user.authenticate(params[:current_password])
 @user && @user.authenticate(params[:current_password]) && @user.activated
params
c
params[:session][:password]
c
params[:password]
@user.authenticate(params[:password])
@user
@user.activated
 @user.authenticate(params[:password])
@user && @user.authenticate(params[:password]) && @user.activated
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
params
c
@user
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
params
c
params
c
@task.update_attribute(:completed_at, Time.now)
@task
c
params
c
params
c
@user
@user && @user.authenticate(params[:session][:password]) && @user.activated
params
c
 invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
 !invitation.nil?
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
@invitations.destroy
 @invitations = Invitation.find_by(recipient_email: @user.email,list_id: @list.id)
@collaboration
c
 Invitation.all
Hirb.enable
 Invitation.all
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
params
user.owner?(task.list) || user == task.user
c
params
c
user.owner?(task.list) || user == task.user
c
user == task.user
user.owner?(task.list)
task
c
params
c
@tasks
tasks
task
c
authorize @tasks
authorize tasks
@tasks = Task.find(params[:task])
params
c
user.owner?(list)
params
c
params
c
params
c
params
c
params
c
task
user.owner?(list)
c
params
c
params
c
 user.owner?(list)
 user.owner?(@list)
list
record.try(:user)
record.try(:list)
@list
list
params
c
 @list = List.find(params[:list_id])
c
user
record.try(:user)
@list
record.try(:list)
c
@list = List.find(params[:list_id])
params
c
>>>>>>> c83f5c90f56d81c5bc2f78e41ff0975ee54a9614
params[:task].each_with_index do |id, index|
params
c
params
c
(@invitation.recipient != nil) && (!@invitation.active)
@invitation.recipient
 @invitation
c
(!invitation.nil? && self.new_record?)
invitation = Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
c
self.invitations.find_by_list_id(list_id).active
self.invitations.find_by_list_id(list_id)
c
self.invitations.find_by_list_id(list_id).active
self.invitations.find_by_list_id(list_id)
self
list_id
c
Invitation.find_by(recipient_email: recipient_email,list_id: list_id)
invitation.nil?
invitation.nil
self.new_record?
(!invitation.nil? && self.new_record?)
c
self.active && User.find_by_email(recipient_email).collaboration_lists.include?(List.find(list_id))
User.find_by_email(recipient_email).collaboration_lists.include?(List.find(list_id))
self.recipient
 self.recipient.collaboration_lists.include?(List.find(list_id))
self.active
(self.active && self.recipient.collaboration_lists.include?(List.find(list_id)))
!self.active
c
(!self.nil? && self.new_record?)
c
!invitation.active
c
self.new_record?
self.nil?
self.nil
(!self.nil? && self.new_record?)
c
 @collaboration.destroy
@collaboration = Collaboration.find_by(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
@collaboration.destroy
 @collaboration = Collaboration.where(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
(!params[:type].blank?) && (params[:type]== 'collaborator')
((params[:user_id].blank?) && (params[:type].blank?))
params
c
params
c
params
c
params
c
@user
 @collaboration = @list.collaborations.where(user_id: @user.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
record.try(:user)
record.try(:list)
@user
@list
params
@user.owner?(record.try(:list)) || record.try(:user) == @user
user.owner?(record.try(:list)) || record.try(:user) == user
c
@current_user
c
log_in user
user
user.activate
user && !user.activated? && user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
c
params[:session][:password]
user && user.authenticate(params[:session][:password])
user.activated
 user && user.authenticate(params[:session][:password]) && user.activated
user = User.find_by_email(params[:session][:email].downcase)
user.activated
user && user.authenticate(params[:session][:password]) && user.activated
params
c
@invitation
c
params
exit
params
c
format.json { render :json => {:htmlerrors => @htmlerrors }}
@htmlerrors = InvitationsController.render(partial: "shared/error_messages", locals: {"object": @invitation}).squish
c
@invitation.token
@invitation = Invitation.find_by(recipient_email: invitation_params[:recipient_email],list_id: invitation_params[:list_id])
@invitation.to_a
@invitation.to_arr
 @invitation = Invitation.where("recipient_email": invitation_params[:recipient_email],"list_id": invitation_params[:list_id]).where_values_hash
@invitation
@invitation.where_values_hash
@invitation["id"]
a.token
a= Invitation.find(16)
@invitation[:id]
@invitation[id]
@invitation
@invitation.list_id
@invitation.id
@invitation
Invitation.generate_token
@invitation.update_token
c
generate_token
Invitation.generate_token
@invitation.update_token
  @invitation
c
@invitation.update_token
 @invitation.generate_token
 @invitation.token
