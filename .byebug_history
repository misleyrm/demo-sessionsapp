c
 @collaboration.destroy
@collaboration = Collaboration.find_by(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
@collaboration.destroy
 @collaboration = Collaboration.where(user_id: @user.id, list_id: @list.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
(!params[:type].blank?) && (params[:type]== 'collaborator')
((params[:user_id].blank?) && (params[:type].blank?))
params
c
params
c
params
c
params
c
@user
 @collaboration = @list.collaborations.where(user_id: @user.id)
(!params[:type].blank? &&  params[:type]=="collaborator")
c
record.try(:user)
record.try(:list)
@user
@list
params
@user.owner?(record.try(:list)) || record.try(:user) == @user
user.owner?(record.try(:list)) || record.try(:user) == user
c
@current_user
c
log_in user
user
user.activate
user && !user.activated? && user.authenticated?(:activation, params[:id])
user = User.find_by(email: params[:email])
c
params[:session][:password]
user && user.authenticate(params[:session][:password])
user.activated
 user && user.authenticate(params[:session][:password]) && user.activated
user = User.find_by_email(params[:session][:email].downcase)
user.activated
user && user.authenticate(params[:session][:password]) && user.activated
params
c
@invitation
c
params
exit
params
c
format.json { render :json => {:htmlerrors => @htmlerrors }}
@htmlerrors = InvitationsController.render(partial: "shared/error_messages", locals: {"object": @invitation}).squish
c
@invitation.token
@invitation = Invitation.find_by(recipient_email: invitation_params[:recipient_email],list_id: invitation_params[:list_id])
@invitation.to_a
@invitation.to_arr
 @invitation = Invitation.where("recipient_email": invitation_params[:recipient_email],"list_id": invitation_params[:list_id]).where_values_hash
@invitation
@invitation.where_values_hash
@invitation["id"]
a.token
a= Invitation.find(16)
@invitation[:id]
@invitation[id]
@invitation
@invitation.list_id
@invitation.id
@invitation
Invitation.generate_token
@invitation.update_token
c
generate_token
Invitation.generate_token
@invitation.update_token
  @invitation
c
@invitation.update_token
 @invitation.generate_token
 @invitation.token
 @invitation 
c
params
c @invitation = Invitation.where("recipient_email": invitation_params[:recipient_email],"list_id": invitation_params[:list_id]) @invitation = Invitation.where("recipient_email": invitation_params[:recipient_e
@collaboration_users = User.where(id: mention_by)
 mention_by = params[:mention_by].tr('[]', '').split(',').map(&:to_i)
params
c
@collaboration_users = User.where(id: params[:mention_by])
params
c
Invitation.where("recipient_email": self.recipient_email,"list_id": self.list_id).blank?
c
Invitation.where(recipient_email: "misley.rodriguez@gmail.com")
@invitation.invitation_existence
 @invitation.sender_id = current_user.id
@invitation = Invitation.new(invitation_params)
c
Invitation.all
Hirb.enable
Invitation.all
(!@invitation.invitation_existence)
  @invitation.sender_id = current_user.id
@invitation = Invitation.new(invitation_params)
c
!@invitation.invitation_existence
@invitation.sender_id = current_user.id
 @invitation = Invitation.new(invitation_params)
c
flag = Invitation.where("recipient_email":invitation_params[:recipient_email],"list_id":params["list_id"])
invitation_params[:recipient_email]
params[:action]
params[:recipient_email]
params[recipient_email]
params[:recipient_email]
flag = Invitation.where("recipient_email":params[:recipient_email],"list_id":params["list_id"])
flag = Invitation.where("recipient_email":params[:recipient_email],"list_id":params["list_id"],"sender_id":current_user.id )
params
c
(!@list.all_tasks_list?) && (!params[:list_owner].blank?)
c
params
c
(@list.user_id!= params[:list_owner].to_i)
List.find(12)
c
(@list.all_tasks_list?) && (@list.update_attributes(:description => list_params[:description]))
params
@list.all_tasks_list?
c
exit
@list.user_id
params[:list_owner]
c
(@list.user_id != params[:list_owner])
params
c
params
c
params
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c
format.html { render action: show, layout: "modal" }
c
sender_id == recipient_id
c
recipient_id
 sender_id
sender_id == recipient_id
c
params
c
params
c
@collaboration_users = User.where(id: params[:mention_by])
params
c
@collaboration_users = User.find(params[:mention_by])
!params[:mention_by].blank?
params
c
params
c
params
c
params
c
params
c
params
c
@collaboration_users.lenght
@collaboration_users
@collaboration_users.count
@collaboration_users
c
params
c
params
paras
c
params
c
params
c
 @collaboration_users
c
User.find(params[:mention_by])
User.find(["7"])
params[:mention_by]
User.find(params[:mention_by]
params
c
params
c
 @collaboration_user
c
params
c
 @collaboration_user
c
User.find("7")
params[:mention_by]
!params[:mention_by].blank?
@collaboration_users
c
params[:mention_by][0]
params[:mention_by]
!params[:mention_by].blank?
params
c
params
c
doc = Nokogiri::HTML(task_params[:detail],nil,"UTF-8")
c
task_params[:detail]
b=Liquid::Template.parse(task_params[:detail]).render
Liquid::Template.parse(task_params[:detail]).render
c
List.current
c
params[:currentList]
params
params[:currentList]
c
params
params[:currentList]
c
List.current = List.find(task_params[:currentList])
c
task_params[:currentList]
params[:detail]
params[:currentList]
params[:currentList]currentList
params[:currentList]
 List.current = List.find(params[:currentList])
params
c
params[:currentList]
List.find(params[:currentList])
params
c
@list
current_list
params
c
params
c
List.current
c
List.current = current_list
c
