c
session[:active_collaborations]
session[:active_collaborations].nil?
session[:active_collaborations].nil
c
 session[:active_collaborations]
users = User.where(id: session[:active_collaborations])
(!session[:active_collaborations].nil?)
session[:active_collaborations]
c
session[:active_collaborations]
(!session[:active_collaborations].nil?)
c
((list.collaboration_users.include?(users.first)) || users.first.owner(list))
c
list.collaboration_users.to_a.uniq{|p| p.id}
list_users = list.collaboration_users.to_a.uniq{|p| p.id} + list.owner
list_users = list.collaboration_users.to_a.uniq{|p| p.id} + list.owner.to_a
c
users.length
users
list_users
(list_users.include?(users))
(list_users.include?(session[:active_collaborations]))
list_users = list.collaboration_users + User.where('id' => list.owner.id)
users
Hirb.enable
users
c
session[:active_collaborations]
c
list.collaboration_users.include?(users.first)
 session[:active_collaborations]
c
session[:active_collaborations]
users = User.where(id: session[:active_collaborations])
list
c
!authorize @task
c
authorize @task
c
user.owner?(task.list_after)
task.list_after
task.try(:list)
c
params
task.list_after
task.list_before
task.try(:list)
list
user
user.owner?(task.try(:list))
 (user.owner?(task.try(:list)) || task.try(:user) == user)
task.current_user_id
task
c
user.collaboration_lists
collaboration_lists = user.collaboration_lists.where('user_id' => current_user_id)
created_lists = user.created_lists.where('user_id' => current_user_id).order('created_at')
user = User.find(user_id)
user_id
current_user_id
c
current_user
params
c
(user.owner?(task.try(:list)) || task.try(:user) == user)
c
Task.find(709).delete
Task.find(706).delete
Task.find(18).delete
Task.all
Task.where(list_id: @list.id)
@list
Task.where(list_id: @list.id).delete_all
c
Task.find(712).delete
Task.find(711).delete
Task.find(710).delete
Task.find(710).deleye
Task.find(710)
@list.tasks.delete_all
@list.tasks
Hirb.enable
@list.tasks
@list
c
@list.tasks
 @list
c
 html = (!current_list.blank?)? render_task(task,current_list,data["partial"],list) : ""
list = List.find(data["list_id"])
current_list = List.find(data["current_list"])
task = Task.find(task_id)
(data["status"]!= 'deleted')
data
c
 html = (!current_list.blank?)? render_task(task,current_list,data["partial"],list) : ""
list = List.find(data["list_id"])
current_list = List.find(data["current_list"])
task = Task.find(task_id)
(data["status"]!= 'deleted')
c
!recipient.blank?
!(current_user?(@task.assigner_id))
 recipient = !(current_user?(@task.assigner_id)) ? User.where(id: @task.assigner_id) : @task.user
(@task.assigner_id != @task.user_id)
c
@task.assigner_id
=======================================================
c
data
c
Task.find(618)
Task.find(619)
Task.find(task_id)
task_id
c
@active_collaborations
c
current_list
params
c
current_list
params
c
current_list
params
c
session[:list_id]
current_list
curent_list
params
c
current_list
params
c
List.current
current_list
@_current_list
params
c
current_list
List.current
params
c
params
c
params
c
params[:mention_by].tr('[]', '').split(',').map(&:to_i)
params[:mention_by]
c
params[:mention_by].to_r
params[:mention_by].to_arr
params[:mention_by]
c
cc
c
"Task id: #{task_id} created"
c
html = (!currentList.blank?)? render_task(task,currentList) : ""
c
email
c
 list = (task.is_blocker?) ? task.parent_task.list : task.list
task.is_blocker?
task.user
task
user = task.parent_task.user
 html = (!currentList.blank?)? render_task(task,currentList) : ""
list
currentList
data
task
c
email.sub!(%r{^\+},"")
email
c
"+info".sub!(%r{^\+},"")
"+info".sub!(%r{^/\+},"")
"+info".sub!(%r{^/+},"")
"1+info".sub!(%r{^1},"")
email.sub!(%r{^+},"")
email
email.sub!(%r{^1},"")
a.delete_prefix("+")
a = String.try_convert(email) 
a = String.try_convert("str") 
String.try_convert(email)
String.try_convert(email)! 
"hello".delete_prefix("hel")
a= email.delete_prefix("+")
a= email.sub!("/^+/", '')
a= email
email
c
tag_emails
c
tag_emails
ag_emails
email.sub!(/^+/, '')
email.sub!(/^"+/, '')
email.sub!(/^+/, '')
email
email.sub!(/^+/, '')
c
 tag_emails
c
 tag_emails
c
self.detail.scan(/[+]+[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i)
self.detail.scan(/\[+]+[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i)
self.detail.scan(/\b[+]+[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i)
self.detail
c
tag_emails
=================================================================
clear
c
@invitation.recipient = User.find(2)
(!@token.nil?) && (@user == @invitation.recipient)
@token = params[:invitation_token]
current_user
c
   10:       html: html }c
    9:       data: data,
ActionCable.server.broadcast "task_list_#{task.list_id}", {
data["currentList"]= currentList
(!currentList.blank?)? render_task(task,currentList) : ""
list
currentList
data
task
c
data["list_id"]
List.current
self.t_blockers.count
 self.list_id
self.user_id
self.user.all_task.id
self.user.num_incompleted_tasks(self.user.all_task)
(!is_blocker?) ? self.user.num_incompleted_tasks(List.find(self.list_id)) : ''
self.id
is_blocker?
c
task.list_id
c
task.id
c
currentList
list
currentList
c
list
